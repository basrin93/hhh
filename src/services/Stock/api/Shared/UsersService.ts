import { useAuthenticatedRequest } from '@/composables/Auth/useAuthenticatedRequest';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface Location {
    city: string | null;
    timezone: string | null;
}

interface User {
    uid: string;
    location: Location;
    employeeDisplay: string | null;
}

interface UsersResponse {
    users: User[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö
interface ResponsibleRequest {
    seizedPropertyUid: string;
    userUid: string;
}

interface UpdateResponsibleRequest {
    responsible: ResponsibleRequest[];
}

class UsersService {
    private authenticatedRequest;

    constructor() {
        this.authenticatedRequest = useAuthenticatedRequest({
            baseURL: window.SERVICE_ENVS.API_URL
        });
    }

    async fetchUsers(): Promise<User[]> {
        try {
            console.log('üìû –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

            const response = await this.authenticatedRequest.makeRequest<UsersResponse>(
                'v1/users',
                { method: 'GET' }
            );

            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response?.users);

            if (!response?.users) {
                console.warn('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç');
            }

            return response?.users || [];
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
            throw error;
        }
    }

    async updateResponsible(responsibleData: ResponsibleRequest[]): Promise<void> {
        try {
            console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö:', responsibleData);

            const requestBody: UpdateResponsibleRequest = {
                responsible: responsibleData
            };

            await this.authenticatedRequest.makeRequest(
                'v1/seized-property-items/responsible',
                {
                    method: 'PATCH',
                    body: requestBody
                }
            );

            console.log('‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö:", error);
            throw error;
        }
    }
}

export default new UsersService();